def all_variants(text):
    n = len(text)
    for end_ind in range(1, n + 1):
        for start_ind in range(n - end_ind + 1):
            yield text[start_ind:start_ind + end_ind]


a = all_variants("abc")
for i in a:
    print(i)

# 1. Объявление функции
# def all_variants(text):
# Здесь мы определяем функцию all_variants, которая принимает один аргумент text — строку,
# для которой мы хотим найти все подстроки.
#
# 2. Определение длины строки
# n = len(text)
# В этой строке мы используем встроенную функцию len(), чтобы определить длину строки text и
# сохраняем её в переменной n. Например, если text = "abc", то переменная n
# будет равна 3, поскольку в строке три символа.
#
# 3. Внешний цикл: перебор длины подстрок
# for end_ind in range(1, n + 1):
# Этот цикл перебирает все возможные длины подстрок. Переменная end_ind принимает значения от 1 до n (включительно).
#
# В нашем примере со строкой "abc" значения end_ind будут: 1, 2, 3.
#
# 4. Внутренний цикл: перебор начальных индексов
# for start_ind in range(n - end_ind + 1):
# Этот цикл определяет начальный индекс start_ind для подстроки фиксированной длины (длиной end_ind).
#
# Выражение n - end_ind + 1 определяет количество возможных начальных индексов для подстроки длиной end_ind.
# Например:
# Если end_ind = 1, n - 1 + 1 = 3, и поэтому start_ind будет принимать значения 0, 1, 2 (индексы 0, 1, 2).
# Если end_ind = 2, тогда n - 2 + 1 = 2, и start_ind может быть 0 или 1 (индексы 0, 1).
# Если end_ind = 3, то n - 3 + 1 = 1, и start_ind будет равен только 0 (индекс 0).
#
# 5. Генерация подстроки
# yield text[start_ind:start_ind + end_ind]
# На каждом шаге внутреннего цикла мы используем оператор yield, чтобы вернуть подстроку text,
# начиная с индекса start_ind и длиной end_ind.
#
# Например, если text = "abc":
# Для end_ind = 1 и start_ind = 0 будет возвращена подстрока text[0:1], т.е. "a".
# Для end_ind = 1 и start_ind = 1 будет возвращена подстрока text[1:2], т.е. "b".
# Для end_ind = 1 и start_ind = 2 будет возвращена подстрока text[2:3], т.е. "c".
# Для end_ind = 2 и start_ind = 0 будет возвращена подстрока text[0:2], т.е. "ab".
# Для end_ind = 2 и start_ind = 1 будет возвращена подстрока text[1:3], т.е. "bc".
# Для end_ind = 3 и start_ind = 0 будет возвращена подстрока text[0:3], т.е. "abc".
#
# 6. Итерация по результатам
# a = all_variants("abc")
# for i in a:
#     print(i)
# На этом этапе мы вызываем функцию all_variants с строкой "abc". Этот вызов возвращает генератор,
# который мы затем перебираем с помощью цикла for. В каждой итерации мы просто
# выводим на печать текущую подстроку, которую возвращает генератор.
#
# Итоговый вывод
# В результате выполнения данного кода на экране будет напечатано:
#
# a
# b
# c
# ab
# bc
# abc
# Пояснение порядка подстрок
# Подстроки выводятся в следующем порядке:
#
# Сначала выводятся все подстроки длины 1.
# Затем — все подстроки длины 2.
# Последней выводится подстрока длиной 3.
# Таким образом, код последовательно генерирует все возможные подстроки строки text
# от длины 1 до n (длиной всей строки) и выводит их на печать.
#
# ... по данной ситуации явно просто необходим отдельный урок ...
